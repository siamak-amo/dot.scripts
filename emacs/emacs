;; load elpeca package and disable default package manager
(load "~/.emacs.d/init.el")
(setq package-enable-at-startup nil)

;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)

;;When installing a package which modifies a form used at the top-level
;;(e.g. a package which adds a use-package key word),
;;use `elpaca-wait' to block until that package has been installed/configured.
;;For example:
;;(use-package general :demand t)
;;(elpaca-wait)

;; Expands to: (elpaca evil (use-package evil :demand t))
;;(use-package evil :demand t)

;;Turns off elpaca-use-package-mode current declartion
;;Note this will cause the declaration to be interpreted immediately (not deferred).
;;Useful for configuring built-in emacs features.
(use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))


;---------------------;
; packages            ;
;---------------------;

;;; evil mode (vi mode)
(use-package evil
	     :init
	     (setq evil-want-integration t)
	     (setq evil-want-keybinding nil)
	     (setq evil-vsplit-window-right t)
	     (setq evil-split-window-bellow t)
	     (evil-mode))
(use-package evil-collection
	     :after evil
	     :config
	     (setq evil-collection-mode-list '(dashboard dired ibuffer))
	     (evil-collection-init)
         (evil-set-undo-system 'undo-tree))


;;; undo redo package
(use-package undo-tree
  :ensure t
  :config
  (global-undo-tree-mode 1))


;;; ivy mode
(use-package ivy
  :ensure t
  :config
  (ivy-mode 1))


;;; general (to configure the evil mode)
(use-package general
  :config
  (general-evil-setup)
  (general-create-definer dt/leader-keys
			  :states '(normal insert visual emacs)
			  :keymaps 'override
			  :prefix "SPC"
			  :global-prefix "M-SPC")
  (dt/leader-keys
    "b" '(:ignore t :wk "buffer")
   "bb" '(switch-to-buffer :wk "Switch buffer")
   "bk" '(kill-this-buffer :wk "Kill this buffer")
   "bn" '(next-buffer :wk "Next buffer")
   "bp" '(previous-buffer :wk "Previous buffer")
   "br" '(revert-buffer :wk "Reload buffer")
   "b/" 'lgrep
   "g"  'revert-buffer))


;;; markdown support
(use-package markdown-mode
  :ensure t
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown"))


;;; latex support
(use-package auctex
  :ensure t
  :defer t)
(setq TeX-view-program-list '(("Okular" "okular %o")))
(setq TeX-view-program-selection '((output-pdf "Okular")))


;;; git support
(use-package magit
  :bind (("C-x g" . magit-status)
         ("C-x C-g" . magit-status)))


(use-package git-gutter
  :hook (prog-mode . git-gutter-mode)
  :config
  (setq git-gutter:update-interval 0.02))


(use-package git-gutter-fringe
  :config
  (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))


;;; which key
(use-package which-key
  :ensure t
  :config
  (which-key-mode))

(use-package company
  :ensure t
  :hook ((emacs-lisp-mode . (lambda()
                              (setq-local company-backends '(company-elisp))))
         (emacs-list-mode . company-mode))
  :config
  (company-keymap--unbind-quick-access company-active-map)
  (company-tng-configure-default)
  (setq company-idle-delay 0.1
        company-minimum-prefix-length 1))


;; LSP support
(use-package lsp-mode
  :ensure t
  :bind (:map lsp-mode-map
         ("C-c d" . lsp-describe-thing-at-point)
         ("C-c a" . lsp-execute-code-action))
  :config
  (lsp-enable-which-key-integration t)
  (define-key lsp-mode-map (kbd "C-c l") lsp-command-map))
(setq lsp-completion-show-detail nil
      lsp-completion-show-kind nil)

;;; python
(setq python-shell-interpreter "python3")
(use-package python-mode
  :ensure t
  :hook ((python-mode . lsp-deferred)
         (python-mode . company-mode))
  :config
  (require 'lsp-python))

;;; golang
(use-package go-mode
  :ensure t
  :hook ((go-mode . lsp-deferred)
         (go-mode . company-mode))
  :bind (:map go-mode-map
              ("<f5>" . gofmt)
              ("C-c 6" . gofmt))
  :config
  (require 'lsp-go)
  (setq lsp-go-analyses
        '((fieldalignment . t)
          (nilness . t)
          (unusedwrite . t)
          (unusedparams . t)))
  (add-to-list 'exec-path "$GOPATH/bin")
  (setq gofmt-command "goimports"))
;; end of LSP support


;; other useful packages
;;; mpd client
(use-package mpdel
  :ensure t
  :config
  (require 'mpdel)
  (mpdel-mode))
;;; jupyter support
(use-package ein
  :ensure t)
(use-package multiple-cursors
  :ensure t)
;; end of other useful packages


;; Don't install anything. Defer execution of BODY
(elpaca nil (message "deferred"))
;; end of package manager




;-------------------------;
; my configs              ;
;-------------------------;

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(font-lock-builtin-face ((t (:foreground "#ffdd33" :family "Monoid"))))
 '(font-lock-comment-face ((t (:foreground "#cc8c3c" :slant italic :family "Monoid"))))
 '(font-lock-function-name-face ((t (:foreground "#96a6c8" :slant italic :weight bold))))
 '(tab-bar ((t (:inherit variable-pitch :foreground "white smoke"))))
 '(tab-bar-tab ((t (:inherit tab-bar :background "#0f1112" :box (:line-width (9 . 3) :color "0f1112" :style flat-button)))))
 '(tab-bar-tab-inactive ((t (:inherit tab-bar-tab :background "gray20")))))
;;; my basic configs
(set-face-attribute 'default nil :font "Monoid")
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq-default line-spacing 8)
(setq indent-line-function 'insert-tab)
(setq-default TeX-engine 'xetex)
(setq inhibit-startup-screen t)
(menu-bar-mode 0)
(tool-bar-mode 0)
(scroll-bar-mode 0)
(setq confirm-kill-emacs 'y-or-n-p)
(set-face-attribute 'font-lock-comment-face nil
		    :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
		    :slant 'italic)
(setq column-number-mode t)
;; use // for comment in c-mode
(defun set-c-comments ()
  (setq comment-start "// "
        comment-end ""))
(add-hook 'c-mode-hook 'set-c-comments)
;;; end of my basic configs



;; load custom themes
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")

;;; setup backup files path to the ~/.emacs.saves and /tmp/emacs
(setq backup-by-copying t)
(setq backup-directory-alist
      `(("." . "~/.emacs.saves")))
(setq auto-save-file-name-transforms
      `((".*" "/tmp/emacs/" t)))
(setq undo-tree-history-directory-alist
      `((".*" . "/tmp/emacs/undo/")))

;; custom shortcuts
(with-eval-after-load 'evil-maps
 ; (define-key evil-normal-state-map (kbd "C-,") nil)
 ; (define-key evil-normal-state-map (kbd "C-.") nil)
  (define-key evil-normal-state-map (kbd "C-n") nil)
  (define-key evil-normal-state-map (kbd "C-p") nil))
(global-set-key (kbd "<f6>") #'recompile)
(global-set-key (kbd "<f8>") #'flyspell-mode)
(global-set-key (kbd "<f9>") #'ispell-word)
(global-set-key (kbd "C-<prior>") #'switch-to-next-buffer)
(global-set-key (kbd "C-n")      #'switch-to-next-buffer)
(global-set-key (kbd "C-<next>") #'switch-to-prev-buffer)
(global-set-key (kbd "C-p")     #'switch-to-prev-buffer)
(global-set-key (kbd "C-<home>") #'tab-bar-switch-to-prev-tab)
(global-set-key (kbd "C-<end>") #'tab-bar-switch-to-next-tab)
;(global-set-key (kbd "C-.")      #'switch-to-next-buffer)
;(global-set-key (kbd "C-,")     #'switch-to-prev-buffer)
(global-set-key (kbd "C->") #'mc/mark-next-like-this)
(global-set-key (kbd "C-<") #'mc/mark-previous-like-this)




;--------------------------;
; emacs generated stuff    ;
;--------------------------;

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enable-theme '(deeper-blue))
 '(custom-enabled-themes '(gruber-darker))
 '(display-line-numbers t)
 '(display-line-numbers-width nil)
 '(line-spacing 0.2)
 '(package-selected-packages '(suscolors-theme))
 '(tab-bar-close-last-tab-choice 'tab-bar-mode-disable)
 '(tab-bar-mode t)
 '(tab-bar-show 1)
 '(tab-width 8)
 '(warning-suppress-log-types
   '(((python python-shell-completion-native-turn-on-maybe))
     ((python python-shell-completion-native-turn-on-maybe))
     ((python python-shell-completion-native-turn-on-maybe))
     ((python python-shell-completion-native-turn-on-maybe))
     (emacs)
     (emacs)
     (emacs)
     (emacs)
     (emacs)
     (emacs)))
 '(warning-suppress-types
   '((ein)
     ((python python-shell-completion-native-turn-on-maybe))
     ((python python-shell-completion-native-turn-on-maybe))
     ((python python-shell-completion-native-turn-on-maybe))
     ((python python-shell-completion-native-turn-on-maybe))
     ((python python-shell-completion-native-turn-on-maybe))
     ((python python-shell-completion-native-turn-on-maybe))
     (emacs)
     (emacs)
     (emacs)
     (emacs)
     (emacs)
     (emacs))))
(put 'downcase-region 'disabled nil)
