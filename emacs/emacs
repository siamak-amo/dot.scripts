;; load elpeca package and disable default package manager
(load "~/.emacs.d/init.el")
(setq package-enable-at-startup nil)

;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)

;;When installing a package which modifies a form used at the top-level
;;(e.g. a package which adds a use-package key word),
;;use `elpaca-wait' to block until that package has been installed/configured.
;;For example:
;;(use-package general :demand t)
;;(elpaca-wait)

;; Expands to: (elpaca evil (use-package evil :demand t))
;;(use-package evil :demand t)

;;Turns off elpaca-use-package-mode current declartion
;;Note this will cause the declaration to be interpreted immediately (not deferred).
;;Useful for configuring built-in emacs features.
(use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))


;---------------------;
; packages            ;
;---------------------;

;;; auto complete stuff
(use-package auto-complete
  :ensure t
  :config
  (require 'auto-complete)
  (require 'auto-complete-config)
  (ac-config-default)
  (add-hook 'c-mode-hook #'auto-complete-mode)
  (defadvice auto-complete-mode (around enable-ac-modes activate)
    "Enable auto-complete-mode unless in python-mode or go-mode."
    (unless (or (eq major-mode 'python-mode)
                (eq major-mode 'go-mode))
      ad-do-it))
  (ad-activate 'auto-complete-mode))

;;; evil mode (vi mode)
(use-package evil
  :config
  (define-key evil-normal-state-map (kbd "M-.") 'find-tag)
  (define-key evil-normal-state-map (kbd "M-,") 'xref-pop-marker-stack)
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-bellow t)
  (add-hook 'prog-mode-hook #'hs-minor-mode)
  (add-hook 'prog-mode-hook #'electric-indent-local-mode)
  (evil-mode))

(use-package evil-collection
  :after evil
  :config
  (setq evil-collection-mode-list '(dashboard dired ibuffer))
  (evil-collection-init)
  (evil-set-undo-system 'undo-tree))

;;; drag-stuff package
(use-package drag-stuff
  :ensure t
  :config
  (global-set-key (kbd "<C-up>") 'drag-stuff-up)
  (global-set-key (kbd "<C-down>") 'drag-stuff-down))

;;; undo redo package
(use-package undo-tree
  :ensure t
  :config
  (global-undo-tree-mode 1))


;;; ivy mode
(use-package ivy
  :ensure t
  :config
  (ivy-mode 1))


;;; general (to configure the evil mode)
(use-package general
  :config
  (general-evil-setup)
  (general-create-definer dt/leader-keys
			  :states '(normal insert visual emacs)
			  :keymaps 'override
			  :prefix "SPC"
			  :global-prefix "M-SPC")
  (dt/leader-keys
    ;; buffer management
    "b" '(:ignore t :wk "buffer")
    "bb" '(switch-to-buffer :wk "Switch buffer")
    "bk" '(kill-this-buffer :wk "Kill this buffer")
    "bn" '(next-buffer :wk "Next buffer")
    "bp" '(previous-buffer :wk "Previous buffer")
    ;; revert / reload
    "g" 'revert-buffer
    "hr" '(:ignore t :wk "Reload")
    "hrr" '((lambda () (interactive)
              (load-file "~/.emacs")
              (ignore (elpaca-process-queues)))
            :wk "Reload emacs config")
    "br" '(revert-buffer :wk "Reload buffer")
    ;; dired
    "d" '(:ignore t :wk "Dired")
    "dd" '(dired :wk "Open dired")
    "dw" '(wdired-change-to-wdired-mode :wk "Writable dired")
    "df" '(wdired-finish-edit :wk "Finish editing")
    ;; vterm
    "t" '(:ignore t :wk "Terminal / Toggle")
    "tv" '(vterm :wk "Open vterm")
    "tt" '(vterm-toggle :wk "Toggle vterm")
    ;; fuzz
    "z"  '(:ignore t :wk "FUZZ")
    "zz" '(fzf :wk "Fuzz")
    "zd" '(fzf-directory :wk "Directory")
    "zb" '(fzf-switch-buffer :wk "Switch buffer")
    "zg" '(fzf-grep :wk "Grep")
    "zG" '(fzf-grep-in-dir :wk "Grep in directory")
    "zf" '(fzf-find-in-buffer :wk "Find in buffer")
    "zF" '(fzf-find-file-in-dir :wk "Find file")
    ;; others
    "b/" 'lgrep
    ))


(use-package vterm
  :ensure t
  :config
  (setq shell-file-name "/bin/zsh"
        vterm-max-scrollback 1000))

(use-package vterm-toggle
  :after vterm
  :ensure t
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                   (let ((buffer (get-buffer buffer-or-name)))
                     (with-current-buffer buffer
                       (or (equal major-mode 'vterm-mode)
                           (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                 (display-buffer-reuse-window display-buffer-at-bottom)
                 ;;(display-buffer-reuse-window display-buffer-in-direction)
                 ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                 ;;(direction . bottom)
                 ;;(dedicated . t) ;dedicated is supported in emacs27
                 (reusable-frames . visible)
                 (window-height . 0.3))))


;;; markdown support
(use-package markdown-mode
  :ensure t
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown"))


;;; latex support
(use-package auctex
  :ensure t
  :defer t)
(setq TeX-view-program-list '(("Okular" "okular %o")))
(setq TeX-view-program-selection '((output-pdf "Okular")))


;;; git support
(use-package magit
  :bind (("C-x g" . magit-status)
         ("C-x C-g" . magit-status)))


(use-package git-gutter
  :hook (prog-mode . git-gutter-mode)
  :config
  (setq git-gutter:update-interval 0.02))


(use-package git-gutter-fringe
  :config
  (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))

;;; fuzzy searching support
(use-package fzf
  :ensure t
  :config
  (require 'fzf)
  (setq fzf/args "-x --print-query --margin=1,0 --no-hscroll"
        fzf/executable "fzf"
        fzf/git-grep-args "--exclude-dir='.git;.svn' -i --line-number %s"
        ;; command used for `fzf-grep-*` functions
        ;; example usage for ripgrep:
        ;; fzf/grep-command "rg --no-heading -nH"
        fzf/grep-command "grep --exclude-dir='.git;.svn' -nrH"
        ;; If nil, the fzf buffer will appear at the top of the window
        fzf/position-bottom t
        fzf/window-height 15))

;;; pdf support
(use-package pdf-tools
  :defer t
  :commands (pdf-loader-install)
  :mode "\\.pdf\\'"
  :bind (:map pdf-view-mode-map
              ("j" . pdf-view-next-line-or-next-page)
              ("k" . pdf-view-previous-line-or-previous-page)
              ("C-i" . pdf-view-themed-minor-mode)
              ("C-+" . pdf-view-enlarge)
              ("C--" . pdf-view-shrink))
  :init (pdf-loader-install)
  :config (add-to-list 'revert-without-query ".pdf"))

;;; which key
(use-package which-key
  :ensure t
  :config
  (which-key-mode))

(use-package company
  :ensure t
  :hook ((emacs-lisp-mode . (lambda()
                              (setq-local company-backends '(company-elisp))))
         (emacs-list-mode . company-mode))
  :config
  (company-keymap--unbind-quick-access company-active-map)
  (company-tng-configure-default)
  (setq company-idle-delay 0.1
        company-minimum-prefix-length 1))


;; LSP support
(use-package lsp-mode
  :ensure t
  :bind (:map lsp-mode-map
         ("C-c d" . lsp-describe-thing-at-point)
         ("C-c a" . lsp-execute-code-action))
  :config
  (lsp-enable-which-key-integration t)
  (define-key lsp-mode-map (kbd "C-c l") lsp-command-map))
(setq lsp-completion-show-detail nil
      lsp-completion-show-kind nil)
(use-package flycheck
  :ensure t)
(use-package lsp-ui
  :ensure t
  :after lsp-mode
  :config
  (lsp-ui-doc-show-with-cursor nil)
  (lsp-ui-doc-show-with-mouse nil))

;;; python
(setq python-shell-interpreter "python3")
(use-package python-mode
  :ensure t
  :hook ((python-mode . lsp-deferred)
         (python-mode . company-mode))
  :config
  (require 'lsp-python))

;;; golang
(use-package go-mode
  :ensure t
  :hook ((go-mode . lsp-deferred)
         (go-mode . company-mode))
  :bind (:map go-mode-map
              ("<f5>" . gofmt)
              ("C-c 6" . gofmt))
  :config
  (require 'lsp-go)
  (setq lsp-go-analyses
        '((fieldalignment . t)
          (nilness . t)
          (unusedwrite . t)
          (unusedparams . t)))
  (add-to-list 'exec-path "$GOPATH/bin")
  (setq gofmt-command "goimports"))
;; end of LSP support


;; other useful packages
;;; modern org mode
(use-package org-modern
  :ensure t
  :config
  (require 'org-modern)
  (add-hook 'org-mode-hook #'org-modern-mode)
  (add-hook 'org-agenda-finalize-hook #'org-modern-agenda))
;;; org presentation mode
(use-package org-present
  :ensure t
  :config
  (require 'org-present))
;;; mpd client
(use-package mpdel
  :ensure t
  :config
  (require 'mpdel)
  (mpdel-mode))
;;; jupyter support
(use-package ein
  :ensure t)
(use-package multiple-cursors
  :ensure t)
;;; docker support
(use-package docker
  :ensure t
  :bind ("C-c d" . docker))
(use-package docker-tramp
  :ensure t)
;; end of other useful packages


;; Don't install anything. Defer execution of BODY
(elpaca nil (message "deferred"))
;; end of package manager




;-------------------------;
; my configs              ;
;-------------------------;

;; always use y/n
(defalias 'yes-or-no-p 'y-or-n-p)
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(font-lock-builtin-face ((t (:foreground "#ffdd33" :family "Monoid"))))
 '(font-lock-comment-face ((t (:foreground "#cc8c3c" :slant italic :family "Monoid"))))
 '(font-lock-function-name-face ((t (:foreground "#96a6c8" :slant italic :weight bold))))
 '(tab-bar ((t (:inherit variable-pitch :foreground "white smoke"))))
 '(tab-bar-tab ((t (:inherit tab-bar :background "#0f1112" :box (:line-width (9 . 3) :color "0f1112" :style flat-button)))))
 '(tab-bar-tab-inactive ((t (:inherit tab-bar-tab :background "gray20")))))
;;; my basic configs
(set-face-attribute 'default nil :font "Monoid")
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq-default line-spacing 8)
(setq indent-line-function 'insert-tab)
(setq-default TeX-engine 'xetex)
(setq inhibit-startup-screen t)
(menu-bar-mode 0)
(tool-bar-mode 0)
(scroll-bar-mode 0)
(which-function-mode 1)
(electric-indent-mode -1)
(setq-default mode-line-format (delq 'mode-line-modes mode-line-format))
(setq confirm-kill-emacs 'y-or-n-p)
(set-face-attribute 'font-lock-comment-face nil
		    :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
		    :slant 'italic)
(setq column-number-mode t)
;; use // for comment in c-mode
(defun set-c-comments ()
  (setq comment-start "// "
        comment-end ""))
(add-hook 'c-mode-hook 'set-c-comments)
(when window-system (set-fontset-font "fontset-default" '(#x600 . #x6ff) "arimo"))
;; zoom
(global-set-key [C-mouse-4] 'text-scale-increase)
(global-set-key [C-mouse-5] 'text-scale-decrease)
;; disable line number
(add-hook 'pdf-view-mode-hook #'(lambda () (interactive) (display-line-numbers-mode -1)))
(add-hook 'image-dired-display-image-mode-hook (lambda () (display-line-numbers-mode -1)))
(add-hook 'image-mode-hook #'(lambda () (interactive) (display-line-numbers-mode -1)))
;; search in dictionary
(defun search_dict ()
  "Search for the word under the cursor in the dictionary."
  (interactive)
  (let ((word (thing-at-point 'word)))
    (if word
        (let ((custom-word (read-string
                            (format "Search (default %s): " word) nil nil word)))
          (dictionary-search custom-word))
      (dictionary))))
;; transparency
(defun increase-transparency ()
  "Increase transparency of the frame by 10%."
  (interactive)
  (let ((current-alpha (or (frame-parameter nil 'alpha-background) 100)))
    (if (> current-alpha 90)
        (message "Maximum Alpha 100%%")
      (setq current-alpha (+ current-alpha 10))
      (set-frame-parameter nil 'alpha-background current-alpha)
      (message "+ Alpha %d%%" current-alpha))))
(defun decrease-transparency ()
  "Decrease transparency of the frame by 10%."
  (interactive)
  (let ((current-alpha (or (frame-parameter nil 'alpha-background) 100)))
    (if (< current-alpha 10)
        (message "Minimum Alpha 0%%")
      (setq current-alpha (- current-alpha 10))
      (set-frame-parameter nil 'alpha-background current-alpha)
      (message "- Alpha %d%%" current-alpha))))
;; smerge
(setq smerge-command-prefix "\C-cm")
;; hide Dired details
(add-hook 'dired-mode-hook #'dired-hide-details-mode)
;;; end of my basic configs


;; load custom themes
(add-to-list 'load-path "~/.emacs.d/themes")
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")


;;; setup backup path to ~/.emacs.saves and /tmp/emacs
(setq backup-by-copying t)
(setq backup-directory-alist
      `(("." . "~/.emacs.saves")))
(setq auto-save-file-name-transforms
      `((".*" "/tmp/emacs/" t)))
(setq undo-tree-history-directory-alist
      `((".*" . "/tmp/emacs/undo/")))


;; custom shortcuts
;; <Fn>
(global-set-key (kbd "<f3>") 'search_dict)
(global-set-key (kbd "<f6>") #'recompile)
(global-set-key (kbd "<f8>") #'flyspell-mode)
(global-set-key (kbd "<f9>") #'ispell-word)
;; managing buffers
(global-set-key (kbd "C-<prior>") #'switch-to-next-buffer)
(global-set-key (kbd "C-n")      #'switch-to-next-buffer)
(global-set-key (kbd "C-<next>") #'switch-to-prev-buffer)
(global-set-key (kbd "C-p")     #'switch-to-prev-buffer)
(global-set-key (kbd "C-<home>") #'tab-bar-switch-to-prev-tab)
(global-set-key (kbd "C-<end>") #'tab-bar-switch-to-next-tab)
(global-set-key (kbd "C-k") 'kill-buffer)
(global-set-key (kbd "s-k") 'kill-buffer)
(global-set-key (kbd "M-o") 'other-window)
;; dired
(global-set-key (kbd "M-b") #'switch-to-buffer)
(global-set-key (kbd "s-b") #'switch-to-buffer)
(global-set-key (kbd "C-x C-i") #'image-dired)
(global-set-key (kbd "M-n") #'dired-next-marked-file)
(global-set-key (kbd "M-p") #'dired-prev-marked-file)
(eval-after-load "dired" '(progn
  (define-key dired-mode-map (kbd "<backspace>") 'dired-up-directory)))
;; split window
(global-set-key (kbd "C-'")  #'split-window-right)
(global-set-key (kbd "C-3")  #'split-window-right)
(global-set-key (kbd "C-\;") #'split-window-below)
(global-set-key (kbd "C-2")  #'split-window-below)
(global-set-key (kbd "C-0")  #'delete-window)
;; others
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "M-m") #'man)
(global-set-key (kbd "M-]") 'increase-transparency)
(global-set-key (kbd "M-[") 'decrease-transparency)
(global-set-key (kbd "C-`") 'vterm-toggle)



;--------------------------;
; emacs generated stuff    ;
;--------------------------;
;  
;  (custom-set-variables
;   ;; custom-set-variables was added by Custom.
;   ;; If you edit it by hand, you could mess it up, so be careful.
;   ;; Your init file should contain only one such instance.
;   ;; If there is more than one, they won't work right.
;   '(custom-enable-theme '(deeper-blue))
;   '(custom-enabled-themes '(gruber-darker))
;   '(display-line-numbers t)
;   '(display-line-numbers-width nil)
;   '(line-spacing 0.2)
;   '(package-selected-packages '(suscolors-theme))
;   '(tab-bar-close-last-tab-choice 'tab-bar-mode-disable)
;   '(tab-bar-mode t)
;   '(tab-bar-show 1)
;   '(tab-width 8)
;   '(warning-suppress-log-types
;     '(((python python-shell-completion-native-turn-on-maybe))
;       ((python python-shell-completion-native-turn-on-maybe))
;       ((python python-shell-completion-native-turn-on-maybe))
;       ((python python-shell-completion-native-turn-on-maybe))
;       (emacs)
;       (emacs)
;       (emacs)
;       (emacs)
;       (emacs)
;       (emacs)))
;   '(warning-suppress-types
;     '((ein)
;       ((python python-shell-completion-native-turn-on-maybe))
;       ((python python-shell-completion-native-turn-on-maybe))
;       ((python python-shell-completion-native-turn-on-maybe))
;       ((python python-shell-completion-native-turn-on-maybe))
;       ((python python-shell-completion-native-turn-on-maybe))
;       ((python python-shell-completion-native-turn-on-maybe))
;       (emacs)
;       (emacs)
;       (emacs)
;       (emacs)
;       (emacs)
;       (emacs))))
;  (put 'downcase-region 'disabled nil)
